{"ast":null,"code":"var _this = this;\nimport data from '../data.json';\nimport { ADD_STUDENT, EDIT_STUDENT, REMOVE_STUDENT, SEARCH } from './type';\nconst initialState = {\n  studentList: data,\n  keyword: \"\",\n  studentEdit: null\n};\nconst studentReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_STUDENT:\n      {\n        const cloneStudentList = [...state.studentList];\n        const studentEdit2 = _this.studentEdit;\n        console.log(studentEdit2);\n        if (action.payload.id) {\n          const index = cloneStudentList.findIndex(student => student.id === action.payload.id);\n          console.log(index);\n          if (index != -1) {\n            cloneStudentList[index] = action.payload;\n          } else {\n            const student = {\n              ...action.payload\n            };\n            cloneStudentList.push(student);\n          }\n        }\n        state.studentList = cloneStudentList;\n        return {\n          ...state\n        };\n      }\n      ;\n    case EDIT_STUDENT:\n      {\n        state.studentEdit = action.payload;\n        return {\n          ...state\n        };\n      }\n    case REMOVE_STUDENT:\n      {\n        const cloneStudentList = [...state.studentList];\n        const index = cloneStudentList.findIndex(student => student.id === action.payload);\n        if (index != -1) {\n          cloneStudentList.splice(index, 1);\n        }\n        state.studentList = cloneStudentList;\n        return {\n          ...state\n        };\n      }\n    case SEARCH:\n      {\n        state.keyword = action.payload;\n        return {\n          ...state\n        };\n      }\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default studentReducer;","map":{"version":3,"names":["data","ADD_STUDENT","EDIT_STUDENT","REMOVE_STUDENT","SEARCH","initialState","studentList","keyword","studentEdit","studentReducer","state","arguments","length","undefined","action","type","cloneStudentList","studentEdit2","_this","console","log","payload","id","index","findIndex","student","push","splice"],"sources":["/Users/dongtran/studen-management/src/components/duck/reducer.jsx"],"sourcesContent":["import data from '../data.json'\nimport {ADD_STUDENT, EDIT_STUDENT, REMOVE_STUDENT, SEARCH} from './type'\n\nconst initialState = {\n    studentList: data,\n    keyword: \"\",\n    studentEdit: null,\n}\n\n\n\nconst studentReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_STUDENT: {\n            const cloneStudentList = [...state.studentList];\n            const studentEdit2 = this.studentEdit;\n            console.log(studentEdit2);\n            if(action.payload.id){\n                const index = cloneStudentList.findIndex((student) => student.id === action.payload.id)\n                console.log(index);\n                if(index != -1) {\n                    cloneStudentList[index] = action.payload;\n                }\n                \n            else{\n                const student = {...action.payload}\n                cloneStudentList.push(student)\n            }}\n\n            state.studentList = cloneStudentList;\n            return { ...state };\n        };\n        case EDIT_STUDENT: {\n            state.studentEdit = action.payload;\n            return {...state}\n        }\n\n        case REMOVE_STUDENT: {\n            const cloneStudentList = [...state.studentList];\n            const index = cloneStudentList.findIndex((student) => student.id === action.payload)\n            if(index != -1){\n                cloneStudentList.splice(index,1)\n            }\n\n            state.studentList = cloneStudentList;\n            return {...state}\n        }\n        \n        case SEARCH: {\n            state.keyword = action.payload;\n            return {...state}\n        }\n    \n        default:\n            return { ...state };\n    }\n}\n\nexport default studentReducer;"],"mappings":";AAAA,OAAOA,IAAI,MAAM,cAAc;AAC/B,SAAQC,WAAW,EAAEC,YAAY,EAAEC,cAAc,EAAEC,MAAM,QAAO,QAAQ;AAExE,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAEN,IAAI;EACjBO,OAAO,EAAE,EAAE;EACXC,WAAW,EAAE;AACjB,CAAC;AAID,MAAMC,cAAc,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,YAAY;EAAA,IAAES,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAChD,QAAQC,MAAM,CAACC,IAAI;IACf,KAAKd,WAAW;MAAE;QACd,MAAMe,gBAAgB,GAAG,CAAC,GAAGN,KAAK,CAACJ,WAAW,CAAC;QAC/C,MAAMW,YAAY,GAAGC,KAAI,CAACV,WAAW;QACrCW,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;QACzB,IAAGH,MAAM,CAACO,OAAO,CAACC,EAAE,EAAC;UACjB,MAAMC,KAAK,GAAGP,gBAAgB,CAACQ,SAAS,CAAEC,OAAO,IAAKA,OAAO,CAACH,EAAE,KAAKR,MAAM,CAACO,OAAO,CAACC,EAAE,CAAC;UACvFH,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;UAClB,IAAGA,KAAK,IAAI,CAAC,CAAC,EAAE;YACZP,gBAAgB,CAACO,KAAK,CAAC,GAAGT,MAAM,CAACO,OAAO;UAC5C,CAAC,MAED;YACA,MAAMI,OAAO,GAAG;cAAC,GAAGX,MAAM,CAACO;YAAO,CAAC;YACnCL,gBAAgB,CAACU,IAAI,CAACD,OAAO,CAAC;UAClC;QAAC;QAEDf,KAAK,CAACJ,WAAW,GAAGU,gBAAgB;QACpC,OAAO;UAAE,GAAGN;QAAM,CAAC;MACvB;MAAC;IACD,KAAKR,YAAY;MAAE;QACfQ,KAAK,CAACF,WAAW,GAAGM,MAAM,CAACO,OAAO;QAClC,OAAO;UAAC,GAAGX;QAAK,CAAC;MACrB;IAEA,KAAKP,cAAc;MAAE;QACjB,MAAMa,gBAAgB,GAAG,CAAC,GAAGN,KAAK,CAACJ,WAAW,CAAC;QAC/C,MAAMiB,KAAK,GAAGP,gBAAgB,CAACQ,SAAS,CAAEC,OAAO,IAAKA,OAAO,CAACH,EAAE,KAAKR,MAAM,CAACO,OAAO,CAAC;QACpF,IAAGE,KAAK,IAAI,CAAC,CAAC,EAAC;UACXP,gBAAgB,CAACW,MAAM,CAACJ,KAAK,EAAC,CAAC,CAAC;QACpC;QAEAb,KAAK,CAACJ,WAAW,GAAGU,gBAAgB;QACpC,OAAO;UAAC,GAAGN;QAAK,CAAC;MACrB;IAEA,KAAKN,MAAM;MAAE;QACTM,KAAK,CAACH,OAAO,GAAGO,MAAM,CAACO,OAAO;QAC9B,OAAO;UAAC,GAAGX;QAAK,CAAC;MACrB;IAEA;MACI,OAAO;QAAE,GAAGA;MAAM,CAAC;EAAC;AAEhC,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}